Index: hw/serial.c
===================================================================
RCS file: /sources/qemu/qemu/hw/serial.c,v
retrieving revision 1.13
diff -u -r1.13 serial.c
--- hw/serial.c	26 Aug 2006 18:00:36 -0000	1.13
+++ hw/serial.c	10 Jan 2007 04:19:03 -0000
@@ -39,6 +39,10 @@
 #define UART_IIR_THRI	0x02	/* Transmitter holding register empty */
 #define UART_IIR_RDI	0x04	/* Receiver data interrupt */
 #define UART_IIR_RLSI	0x06	/* Receiver line status interrupt */
+#define UART_IIR_CTI    0x0C    /* Character Timeout Indication */
+
+#define UART_IIR_FENF   0x80    /* Fifo enabled, but not functionning */
+#define UART_IIR_FE     0xC0    /* Fifo enabled */
 
 /*
  * These are the definitions for the Modem Control Register
@@ -70,6 +74,119 @@
 #define UART_LSR_OE	0x02	/* Overrun error indicator */
 #define UART_LSR_DR	0x01	/* Receiver data ready */
 
+/*
+ * These are the definitions for the Fifo Control Register
+ */
+
+#define UART_FCR_ITL_MASQ   0xC0 /* Masq for Interrupt Trigger Level */
+
+#define UART_FCR_ITL_1      0x00 /* 1 byte Interrupt Trigger Level */
+#define UART_FCR_ITL_4      0x40 /* 4 bytes Interrupt Trigger Level */
+#define UART_FCR_ITL_8      0x80 /* 8 bytes Interrupt Trigger Level */
+#define UART_FCR_ITL_14     0xC0 /* 14 bytes Interrupt Trigger Level */
+
+#define UART_FCR_DMS        0x08    /* DMA Mode Select */
+#define UART_FCR_XFR        0x04    /* XMIT Fifo Reset */
+#define UART_FCR_RFR        0x02    /* RCVR Fifo Reset */
+#define UART_FCR_FE         0x01    /* FIFO Enable */
+
+#define UART_FIFO_LENGTH    16     /* 16550A Fifo Length */
+
+struct SerialFifo {
+    char *data;             /* bytes contained by the fifo */
+    unsigned int count;     /* number of byte in the fifo */
+    unsigned int length;    /* length of the fifo */
+    unsigned int trigger;   /* trigger level of the fifo */
+} typedef SerialFifo;
+
+/* initialize a FIFO */
+SerialFifo * fifo_init(unsigned int length, unsigned int trigger) {
+    SerialFifo *f;
+    if(!length)
+        return NULL;
+    if(trigger>length)
+        return NULL;
+    f = qemu_mallocz(sizeof(SerialFifo));
+    if(f == NULL)
+        return NULL;
+    f->data = qemu_mallocz(length);
+    if(f->data == NULL) {
+        qemu_free(f);
+        return NULL;
+    }
+    f->length = length;
+    f->count = 0;
+    f->trigger = trigger;
+    return f;
+}
+
+/* set the trigger level of a FIFO */
+int fifo_set_trigger(SerialFifo *f, unsigned int trigger) {
+    f->trigger = trigger;
+    return 1;
+}
+
+/* clear a FIFO */
+int fifo_clear(SerialFifo *f) {
+    f->count = 0;
+    return 1;
+}
+
+
+/* free the memory of the FIFO - unused */
+int fifo_free(SerialFifo *f) {
+    if(f->data != NULL)
+        qemu_free(f->data);
+    qemu_free(f);
+    return 1;
+}
+
+/* put a character in the FIFO */
+int fifo_put(SerialFifo *f, uint8_t *buf, int size) {
+    if(f->count >= f->length)
+        return 0;
+    /* Do the fifo moving */
+    memmove(f->data+f->count, buf, size);
+    f->count += size;
+    return 1;
+}
+
+/* get the FIFO triggering level */
+unsigned int fifo_get_trigger(SerialFifo *f) {
+    return f->trigger;
+}
+
+
+/* get the first char of the FIFO */
+char fifo_get(SerialFifo *f) {
+    char c;
+    if(f->count == 0)
+        return (char) 0;
+    f->count -= 1;
+    c = f->data[0];
+    memmove(f->data, f->data+1, f->count);
+    return c;
+}
+
+unsigned int fifo_count(SerialFifo *f) {
+    return f->count;
+}
+
+unsigned int fifo_is_full(SerialFifo *f) {
+    if(f->count >= f->length)
+        return 1;
+    else
+        return 0;
+}
+
+/* Used to test if the FIFO trigger level is reached */
+unsigned int fifo_is_triggered(SerialFifo *f) {
+    if(f->count >= f->trigger)
+        return 1;
+    else
+        return 0;
+}
+
 struct SerialState {
     uint16_t divider;
     uint8_t rbr; /* receive register */
@@ -80,6 +197,7 @@
     uint8_t lsr; /* read only */
     uint8_t msr; /* read only */
     uint8_t scr;
+    uint8_t fcr;
     /* NOTE: this hidden state is necessary for tx irq generation as
        it can be reset while reading iir */
     int thr_ipending;
@@ -90,18 +208,33 @@
     int last_break_enable;
     target_ulong base;
     int it_shift;
+    int output_fifo_count;                  /* number of byte in the simulated XMIT FIFO */
+    int64_t output_start_time;              /* Time when the first byte has been put in the XMIT FIFO */
+    SerialFifo *input_fifo;
+    float char_transmit_time;               /* time to transmit a char */
+    struct QEMUTimer *fifo_timeout_timer;
+    int timeout_ipending;                   /* timeout interrupt pending state */
+    struct QEMUTimer *fifo_transmit_timer;
 };
 
+
+
 static void serial_update_irq(SerialState *s)
 {
-    if ((s->lsr & UART_LSR_DR) && (s->ier & UART_IER_RDI)) {
-        s->iir = UART_IIR_RDI;
+    if ((s->lsr & UART_LSR_OE) && (s->ier & UART_IER_RLSI)) {
+            s->iir = (s->iir& UART_IIR_FE) | UART_IIR_RLSI;
+    } else if ((s->lsr & UART_LSR_DR) && (s->ier & UART_IER_RDI) && (s->fcr & UART_FCR_FE) && fifo_is_triggered(s->input_fifo) ) {
+            s->iir = (s->iir& UART_IIR_FE) | UART_IIR_RDI;
+    } else if ((s->lsr & UART_LSR_DR) && (s->ier & UART_IER_RDI) && !((s->fcr & UART_FCR_FE) != 0) ) {
+            s->iir = (s->iir& UART_IIR_FE) | UART_IIR_RDI;
+    } else if (s->timeout_ipending) {
+         s->iir = (s->iir& UART_IIR_FE) | UART_IIR_CTI;
     } else if (s->thr_ipending && (s->ier & UART_IER_THRI)) {
-        s->iir = UART_IIR_THRI;
+        s->iir = (s->iir& UART_IIR_FE) | UART_IIR_THRI;
     } else {
-        s->iir = UART_IIR_NO_INT;
+        s->iir = (s->iir& UART_IIR_FE) | UART_IIR_NO_INT;
     }
-    if (s->iir != UART_IIR_NO_INT) {
+    if ( ! (s->iir & UART_IIR_NO_INT) ) {
         s->set_irq(s->irq_opaque, s->irq, 1);
     } else {
         s->set_irq(s->irq_opaque, s->irq, 0);
@@ -110,10 +243,13 @@
 
 static void serial_update_parameters(SerialState *s)
 {
-    int speed, parity, data_bits, stop_bits;
+    int speed, parity, data_bits, stop_bits, bit_count;
     QEMUSerialSetParams ssp;
 
+    bit_count = 1;
+
     if (s->lcr & 0x08) {
+        bit_count += 1;
         if (s->lcr & 0x10)
             parity = 'E';
         else
@@ -126,6 +262,7 @@
     else
         stop_bits = 1;
     data_bits = (s->lcr & 0x03) + 5;
+    
     if (s->divider == 0)
         return;
     speed = 115200 / s->divider;
@@ -134,6 +271,8 @@
     ssp.data_bits = data_bits;
     ssp.stop_bits = stop_bits;
     qemu_chr_ioctl(s->chr, CHR_IOCTL_SERIAL_SET_PARAMS, &ssp);
+    bit_count += stop_bits + data_bits;
+    s->char_transmit_time = ( (float) bit_count * 1000) / speed;
 #if 0
     printf("speed=%d parity=%c data=%d stop=%d\n", 
            speed, parity, data_bits, stop_bits);
@@ -156,14 +295,30 @@
             s->divider = (s->divider & 0xff00) | val;
             serial_update_parameters(s);
         } else {
-            s->thr_ipending = 0;
-            s->lsr &= ~UART_LSR_THRE;
-            serial_update_irq(s);
             ch = val;
-            qemu_chr_write(s->chr, &ch, 1);
-            s->thr_ipending = 1;
-            s->lsr |= UART_LSR_THRE;
-            s->lsr |= UART_LSR_TEMT;
+            if(s->fcr & UART_FCR_FE) {
+                s->thr_ipending = 0;
+                s->lsr &= ~UART_LSR_TEMT;
+                s->lsr &= ~UART_LSR_THRE;
+                qemu_chr_write(s->chr, &ch, 1);
+                /* get the vm time when the first byte is put in the output FIFO */
+                if(s->output_fifo_count == 0) {
+                    s->output_start_time = qemu_get_clock (vm_clock);
+                }
+                int64_t ticks;
+                /* call the XMIT ending FIFO emit when all byte are suposed to be send by the output fifo */
+                ticks = (int64_t) ((ticks_per_sec * s->char_transmit_time * s->output_fifo_count )/1000);
+                qemu_mod_timer(s->fifo_transmit_timer  ,  s->output_start_time + ticks);
+                s->output_fifo_count += 1;
+            } else {
+                s->thr_ipending = 0;
+                s->lsr &= ~UART_LSR_THRE;
+                serial_update_irq(s);
+                qemu_chr_write(s->chr, &ch, 1);
+                s->thr_ipending = 1;
+                s->lsr |= UART_LSR_THRE;
+                s->lsr |= UART_LSR_TEMT;
+            }
             serial_update_irq(s);
         }
         break;
@@ -180,6 +335,57 @@
         }
         break;
     case 2:
+        {
+            /* FIFO Control Register - ignores the DMA bit */
+            unsigned int trigger;
+            int fifo_enable_changed;
+
+            trigger = 0;
+            fifo_enable_changed = 0;
+
+
+            /* Compute RCVR FIFO trigger Level */
+            ch = val & UART_FCR_ITL_MASQ;
+            if(ch == (unsigned char) UART_FCR_ITL_1) 
+                trigger = 1;
+            if(ch == (unsigned char) UART_FCR_ITL_4)
+                trigger = 4;
+            if(ch == (unsigned char) UART_FCR_ITL_8)
+                trigger = 8;
+            if(ch == (unsigned char) UART_FCR_ITL_14)
+                trigger = 14;
+
+            ch = val;
+            /* Detect FIFO mode changes */
+            if(ch & UART_FCR_FE) {
+                if( !(s->fcr & UART_FCR_FE) )
+                        fifo_enable_changed = 1;
+                s->iir |= UART_IIR_FE;
+            } else {
+                if(s->fcr & UART_FCR_FE)
+                        fifo_enable_changed = 1;
+                s->iir &= ~(unsigned char) UART_IIR_FE;
+            }
+
+            s->fcr = val;
+
+            /* Clear FIFOs if FIFO mode has been changed */
+            if(fifo_enable_changed) {
+                fifo_clear(s->input_fifo);
+            }
+            
+            /* If FIFO mode is enabled config RCVR FIFO trigger level */
+            if(s->fcr & UART_FCR_FE) {
+                fifo_set_trigger(s->input_fifo, trigger);
+            }
+
+            /* Manage Fifo Control Register clearing bits*/
+            if(s->fcr & UART_FCR_FE) {
+                if(s->fcr & UART_FCR_RFR)
+                    fifo_clear(s->input_fifo);
+            }
+
+        }
         break;
     case 3:
         {
@@ -219,8 +425,22 @@
         if (s->lcr & UART_LCR_DLAB) {
             ret = s->divider & 0xff; 
         } else {
-            ret = s->rbr;
-            s->lsr &= ~(UART_LSR_DR | UART_LSR_BI);
+            if(s->fcr & UART_FCR_FE) {
+                int64_t ticks;
+                ticks = (int64_t) ( (ticks_per_sec * s->char_transmit_time * 4) / 1000 );
+                ret = fifo_get(s->input_fifo);
+                if(fifo_count(s->input_fifo) == 0)
+                    s->lsr &= ~(UART_LSR_DR | UART_LSR_BI);
+                else
+                    /* call the RCVR FIFO timeout routine in 4 char transmit time */
+                    qemu_mod_timer(s->fifo_timeout_timer  ,  qemu_get_clock (vm_clock) + ticks);
+                s->timeout_ipending = 0;
+                /* break interrupt */
+
+            } else {
+                ret = s->rbr;
+                s->lsr &= ~(UART_LSR_DR | UART_LSR_BI);
+            }
             serial_update_irq(s);
         }
         break;
@@ -268,18 +488,63 @@
     return ret;
 }
 
+/* callback used to trigger the Transmit Holding Register Empty interrupt when all byte are transmited from the simulated XMIT buffer */
+static void output_bytes_transmited_cb (void *opaque) {
+    SerialState *s = opaque;
+    s->output_fifo_count = 0;
+    s->thr_ipending = 1;
+    s->lsr |= UART_LSR_THRE;
+    s->lsr |= UART_LSR_TEMT;
+    serial_update_irq(s);
+}
+
+/* callback called when no new char has been received for 4 char transmit times */
+static void timeout_timer_cb (void *opaque) {
+    SerialState *s = opaque;
+
+    if(fifo_count(s->input_fifo) > 0) {
+        s->timeout_ipending = 1;
+    } else {
+        s->timeout_ipending = 0;
+    }
+    serial_update_irq(s);
+}
+
+
+
 static int serial_can_receive(SerialState *s)
 {
-    return !(s->lsr & UART_LSR_DR);
+    if(s->fcr & UART_FCR_FE) {
+        if(fifo_count(s->input_fifo) < UART_FIFO_LENGTH)
+            return UART_FIFO_LENGTH - fifo_count(s->input_fifo);
+        else
+            return 0;
+    } else {
+        return !(s->lsr & UART_LSR_DR);
+    }
 }
 
-static void serial_receive_byte(SerialState *s, int ch)
-{
-    s->rbr = ch;
-    s->lsr |= UART_LSR_DR;
+static void serial_receive_bytes(SerialState *s, uint8_t *buf, int size) {
+    if(s->fcr & UART_FCR_FE) {
+        if( fifo_is_full(s->input_fifo) ) {
+            s->lsr |= UART_LSR_OE;
+        } else {
+            /* call the timeout receive callback in 4 char transmit time */
+            int64_t ticks;
+            ticks = (int64_t) ((ticks_per_sec * s->char_transmit_time * 4) / 1000 );
+            fifo_put(s->input_fifo, buf, size);
+            s->lsr |= UART_LSR_DR;
+            qemu_mod_timer(s->fifo_timeout_timer  ,  qemu_get_clock (vm_clock) + ticks);
+        }
+    } else {
+        s->rbr = buf[0];
+        s->lsr |= UART_LSR_DR;
+    }
     serial_update_irq(s);
 }
 
+            
+
 static void serial_receive_break(SerialState *s)
 {
     s->rbr = 0;
@@ -296,7 +561,7 @@
 static void serial_receive1(void *opaque, const uint8_t *buf, int size)
 {
     SerialState *s = opaque;
-    serial_receive_byte(s, buf[0]);
+    serial_receive_bytes(s, buf, size);
 }
 
 static void serial_event(void *opaque, int event)
@@ -319,6 +584,7 @@
     qemu_put_8s(f,&s->lsr);
     qemu_put_8s(f,&s->msr);
     qemu_put_8s(f,&s->scr);
+    qemu_put_8s(f,&s->fcr);
 }
 
 static int serial_load(QEMUFile *f, void *opaque, int version_id)
@@ -340,6 +606,7 @@
     qemu_get_8s(f,&s->lsr);
     qemu_get_8s(f,&s->msr);
     qemu_get_8s(f,&s->scr);
+    qemu_get_8s(f,&s->fcr);
 
     return 0;
 }
@@ -360,6 +627,14 @@
     s->iir = UART_IIR_NO_INT;
     s->msr = UART_MSR_DCD | UART_MSR_DSR | UART_MSR_CTS;
 
+    /* Init fifo structures */
+    s->input_fifo = fifo_init(UART_FIFO_LENGTH , 0);
+    s->fifo_timeout_timer = qemu_new_timer(vm_clock, timeout_timer_cb, s);
+    s->fifo_transmit_timer = qemu_new_timer(vm_clock, output_bytes_transmited_cb, s);
+ 
+    s->output_fifo_count = 0;
+    s->output_start_time = 0;
+
     register_savevm("serial", base, 2, serial_save, serial_load, s);
 
     register_ioport_write(base, 8, 1, serial_ioport_write, s);
@@ -447,6 +722,14 @@
     s->base = base;
     s->it_shift = it_shift;
 
+    /* Init fifo structures */
+    s->input_fifo = fifo_init(UART_FIFO_LENGTH , 0);
+    s->fifo_timeout_timer = qemu_new_timer(vm_clock, timeout_timer_cb, s);
+    s->fifo_transmit_timer = qemu_new_timer(vm_clock, output_bytes_transmited_cb, s);
+    s->output_fifo_count = 0;
+    s->output_start_time = 0;
+
+
     register_savevm("serial", base, 2, serial_save, serial_load, s);
 
     s_io_memory = cpu_register_io_memory(0, serial_mm_read,
